#import "PAT.Lib.List";

#define BUFFER_SIZE 2;
#define NUM_BUFFERS 3;
#define NUM_CRAWLERS 6;

var urls = [18, 19, 20, 18, 21, 22, 21, 23, 24, 24, 25, 26, 27, 28, 28, 29, 26, 30, 32, 31, 33, 35, 35, 34, 36, 37, 37, 38, 38, 40, 
	39, 41, 42, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9];


// crawlerSem & builderSem: synchronise the access of buffer between crawler and builder who share the same buffer
// bufferMutex : synchronise the access of buffer between crawlers who share the same buffer
var crawlerSem = BUFFER_SIZE; 
var builderSem = 0; 
var bufferMutex = [1(3)];

Crawler(i) = [crawlerSem > 0]grabCrawlerSem{crawlerSem = crawlerSem - 1} -> AddToBuffer(i);

AddToBuffer(i) = [bufferMutex[i] > 0]grabBufferMutex{bufferMutex[i] = bufferMutex[i] - 1} -> addToBuffer -> releaseBufferMutex{bufferMutex[i] = bufferMutex[i] + 1}
	-> AfterAddToBuffer(i);

AfterAddToBuffer(i) = releaseBuilderSem{builderSem = builderSem + 1} -> Crawler(i);

// Simulate 2 crawlers sharing the same buffer
Crawlers(i) = |||n:{0..1} @ Crawler(i);

Builder() = [builderSem == BUFFER_SIZE]grabBuilderSem{builderSem = 0} -> removeAllFromBuffer -> releaseCralwerSem{crawlerSem = BUFFER_SIZE} -> Builder();

// Simulate the interaction between 2 crawlers and 1 builder on 1 buffer
CrawlersBuilder(i) = Crawlers(i) || Builder();

// Simulate three concurrent occurences of CrawlersBuilder()
CrawlersBuilder3() = |||i:{0..2} @ CrawlersBuilder(i);

#assert CrawlersBuilder3() deadlockfree;
